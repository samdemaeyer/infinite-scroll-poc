{"version":3,"sources":["components/Section.js","utils/GenerateHexColor.js","App.js","serviceWorker.js","index.js"],"names":["Section","style","backgroundColor","this","props","bgColor","id","index","React","Component","generateHexColor","Math","random","toString","App","arguments","state","prevSections","sections","key","GenerateHexColor","lastScroll","window","addEventListener","scrollingUp","pageYOffset","innerHeight","newKey","Number","prevSection","shift","setState","length","pop","scrollTo","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQAceA,G,6KATX,OACE,6BAASC,MAAO,CAACC,gBAAiBC,KAAKC,MAAMC,SAAUC,GAAIH,KAAKC,MAAMG,OACpE,4BAAKJ,KAAKC,MAAMG,OAChB,oDAAyB,8BAAOJ,KAAKC,MAAMC,e,GAL7BG,IAAMC,YCHb,SAASC,IACtB,MAAM,IAAN,QAA0B,SAAdC,KAAKC,UAAmB,GAAGC,SAAS,K,ICiDnCC,E,kDA7Cb,aAAe,IAAD,8BACZ,eAASC,YACJC,MAAQ,CACXC,aAAc,GACdC,SAAU,CACR,kBAAC,EAAD,CAASC,IAAK,EAAGZ,MAAO,EAAGF,QAASe,MACpC,kBAAC,EAAD,CAASD,IAAK,EAAGZ,MAAO,EAAGF,QAASe,MACpC,kBAAC,EAAD,CAASD,IAAK,EAAGZ,MAAO,EAAGF,QAASe,QAP5B,E,gEAYO,IAAD,OACdC,EAAa,EACjBC,OAAOC,iBAAiB,UAAU,WAChC,IAAMC,EAAcF,OAAOG,YAAcJ,EAEzC,GAAIC,OAAOG,YAAcH,OAAOI,YAAa,CAC3C,IAAMC,EAASC,OAAO,EAAKZ,MAAME,SAAS,GAAGC,KAAO,EAC9CU,EAAc,EAAKb,MAAME,SAASY,QACxC,EAAKC,SAAS,CAAEd,aAAa,GAAD,mBAAM,EAAKD,MAAMC,cAAjB,CAA+BY,MAC3D,EAAKE,SAAS,CACZb,SAAS,GAAD,mBACH,EAAKF,MAAME,UADR,CAEN,kBAAC,EAAD,CAASC,IAAKQ,EAAQpB,MAAOoB,EAAQtB,QAASe,UAKhDI,GAAsC,IAAvBF,OAAOG,aAAqB,EAAKT,MAAMC,aAAae,SACrE,EAAKhB,MAAME,SAASe,MACpB,EAAKF,SAAS,CACZb,SAAS,CAAG,EAAKF,MAAMC,aAAagB,OAA5B,mBAAsC,EAAKjB,MAAME,aAE3DI,OAAOY,SAAS,EAAGZ,OAAOI,cAE5BL,EAAaC,OAAOG,iB,+BAKtB,OAAOtB,KAAKa,MAAME,a,GA1CJV,IAAMC,WCQJ0B,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.86abac0f.chunk.js","sourcesContent":["import React from 'react';\nimport './Section.css';\n\nclass Section extends React.Component {\n  render() {\n    return (\n      <section style={{backgroundColor: this.props.bgColor}} id={this.props.index}>\n        <h1>{this.props.index}</h1>\n        <small>Background color: <code>{this.props.bgColor}</code></small>\n      </section>\n    )\n  }\n}\n\nexport default Section;\n","export default function generateHexColor() {\n  return `#${(Math.random()*0xFFFFFF<<0).toString(16)}`;\n}\n","import React from 'react';\nimport Section from './components/Section';\nimport GenerateHexColor from './utils/GenerateHexColor';\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      prevSections: [],\n      sections: [\n        <Section key={0} index={0} bgColor={GenerateHexColor()} />,\n        <Section key={1} index={1} bgColor={GenerateHexColor()} />,\n        <Section key={2} index={2} bgColor={GenerateHexColor()} />\n      ]\n    }\n  }\n\n  componentDidMount() {\n    let lastScroll = 0;\n    window.addEventListener('scroll', () => {\n      const scrollingUp = window.pageYOffset < lastScroll;\n\n      if (window.pageYOffset > window.innerHeight) {\n        const newKey = Number(this.state.sections[2].key) + 1;\n        const prevSection = this.state.sections.shift();\n        this.setState({ prevSections: [...this.state.prevSections, prevSection] });\n        this.setState({\n          sections: [\n            ...this.state.sections,\n            <Section key={newKey} index={newKey} bgColor={GenerateHexColor()} />\n          ]\n        });\n      }\n\n      if (scrollingUp && window.pageYOffset === 0 && this.state.prevSections.length) {\n        this.state.sections.pop();\n        this.setState({\n          sections: [ this.state.prevSections.pop(), ...this.state.sections ]\n        });\n        window.scrollTo(0, window.innerHeight)\n      }\n      lastScroll = window.pageYOffset;\n    });\n  }\n\n  render() {\n    return this.state.sections;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}